/*
 * UmutCanGenlik_EmailView.java
 */

package umutcangenlik_email;

import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.ListModel;

/**
 * The application's main frame.
 */
public class UmutCanGenlik_EmailView extends FrameView {

    public UmutCanGenlik_EmailView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
               
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
      

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                  
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
               
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                   
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                   ;
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = UmutCanGenlik_EmailApp.getApplication().getMainFrame();
            aboutBox = new UmutCanGenlik_EmailAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        UmutCanGenlik_EmailApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setPreferredSize(new java.awt.Dimension(900, 600));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(umutcangenlik_email.UmutCanGenlik_EmailApp.class).getContext().getResourceMap(UmutCanGenlik_EmailView.class);
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setActionCommand(resourceMap.getString("jButton1.actionCommand")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jList1.setName("jList1"); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N

        jTextField2.setText(resourceMap.getString("jTextField2.text")); // NOI18N
        jTextField2.setName("jTextField2"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane2.setViewportView(jTextArea1);

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jPasswordField1.setText(resourceMap.getString("jPasswordField1.text")); // NOI18N
        jPasswordField1.setName("jPasswordField1"); // NOI18N

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(32, 32, 32)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPasswordField1, 0, 0, Short.MAX_VALUE)
                    .addComponent(jTextField2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, 0, 0, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(96, 96, 96)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addGap(14, 14, 14))
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents
    String server = "imap.gmail.com";
    String userName = new String();
    String password = new String();
    int port = 993;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        server = jTextField1.getText();
        userName=jTextField2.getText();
        password=jPasswordField1.getText();

        try {


         // obtain SSLSocketFactory for creating SSLSockets
         SSLSocketFactory socketFactory =
            ( SSLSocketFactory ) SSLSocketFactory.getDefault();

         // create SSLSocket from factory
         SSLSocket socket =
            ( SSLSocket ) socketFactory.createSocket(
               server, port );

         // create PrintWriter for sending login to server
         PrintWriter output = new PrintWriter(
            new OutputStreamWriter( socket.getOutputStream() ) );



         // create BufferedReader for reading server response
         BufferedReader input = new BufferedReader(
            new InputStreamReader( socket.getInputStream () ) );

         output.println(". LOGIN "+userName+" "+password);
         output.flush();
            try {
                Thread.sleep(2000);// in order to send another command 
            } catch (InterruptedException ex) {
                Logger.getLogger(UmutCanGenlik_EmailView.class.getName()).log(Level.SEVERE, null, ex);
            }
         // read response from server
         String response = input.readLine();// put resonse to another string 
         System.out.println(response);
         response = input.readLine();
         System.out.println(response);
         response = input.readLine();
         System.out.println(response);
            //select inbox 
        output.println(". SELECT INBOX");
         output.flush();
         response = input.readLine();

        //read first 7 lines of fetched data
         for(int i = 0; i<6;i++){
            response = input.readLine();
              System.out.println(response);
         }
           try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(UmutCanGenlik_EmailView.class.getName()).log(Level.SEVERE, null, ex);
            }
            // fetch inbox emails from server
         output.println(". fetch 1:10 (body[header.fields (from to subject date)])");
            output.flush();
            ArrayList email_list = new ArrayList(); // create  an array list
            ArrayList last_list = new ArrayList(); // create an array list
         response = input.readLine();
         email_list.add(response);// put response from server to an array list
            while(response.substring(0, 4).equals(". OK")==false){//parse data in email list 
                System.out.println(response);
                response = input.readLine();
                  email_list.add(response);
                while(response.length()<4){
                    response = input.readLine();
                      email_list.add(response);
                }
            }
         email_list.remove(email_list.size()-1);//remove email list with size
         String first = "";
         String temp_string="      ";
         
            // take care of noise and rest of data
         int list_counter= 0; 
         int counter=1;
         while(counter<=email_list.size()){
            while(temp_string.substring(0, 2).equals("* ")==false){// substring to understand when response finishes with * ok success

                if(counter>=email_list.size())
                    break;

                temp_string= (String) email_list.get(counter);
      
                
                while(temp_string.length()<=2){

                    if(counter>=email_list.size())
                        break;

                    temp_string= (String) email_list.get(counter);
                    if(temp_string.length()>2){
                        break;
                    }
                    first+= temp_string;
                    counter++;
                }

                if(counter>=email_list.size())
                        break;

                if(temp_string.substring(0, 2).equals("* ")==true)
                {
                    counter++;
                }
                else{
                first+= temp_string;
                counter++;
                }

            }
            
            
            last_list.add(list_counter, first);
            list_counter++;
            first="";
            temp_string = "      ";

            if(counter>=email_list.size())
                        break;
         }
         DefaultListModel my_model = new DefaultListModel();// create a model

            for(int i = 0; i<last_list.size();i++){
                my_model.addElement(last_list.get(i));
            }
           jList1.setModel(my_model);// print parsed data
          output.close();
          input.close();
          socket.close();

      } // end try

      // handle exception communicating with server
      catch ( IOException ioException ) {
         ioException.printStackTrace();
      }



    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // TODO add your handling code here:
        int select = jList1.getSelectedIndex();

        server = jTextField1.getText();
        userName= jTextField2.getText();
        password = jPasswordField1.getText();

        try {


         // obtain SSLSocketFactory for creating SSLSockets
         SSLSocketFactory socketFactory =
            ( SSLSocketFactory ) SSLSocketFactory.getDefault();

         // create SSLSocket from factory
         SSLSocket socket =
            ( SSLSocket ) socketFactory.createSocket(
               server, port );

         // create PrintWriter for sending login to server
         PrintWriter output = new PrintWriter(
            new OutputStreamWriter( socket.getOutputStream() ) );



         // create BufferedReader for reading server response
         BufferedReader input = new BufferedReader(
            new InputStreamReader( socket.getInputStream () ) );

         output.println(". LOGIN "+userName+" "+password);
         output.flush();
            try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(UmutCanGenlik_EmailView.class.getName()).log(Level.SEVERE, null, ex);
            }
         // read response from server
         String response = input.readLine();
         System.out.println(response);
         response = input.readLine();
         System.out.println(response);
         response = input.readLine();
         System.out.println(response);

        output.println(". SELECT INBOX");
         output.flush();
         response = input.readLine();


         for(int i = 0; i<6;i++){
            response = input.readLine();
              System.out.println(response);
         }
           try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(UmutCanGenlik_EmailView.class.getName()).log(Level.SEVERE, null, ex);
            }
         output.println(". fetch "+select+1+" body[text]");
            output.flush();
            ArrayList email_list = new ArrayList();
            ArrayList last_list = new ArrayList();
         response = input.readLine();
         email_list.add(response);
            while(response.substring(0, 4).equals(". OK")==false){
                System.out.println(response);
                response = input.readLine();
                  email_list.add(response);
                while(response.length()<4){
                    response = input.readLine();
                      email_list.add(response);
                }
            }
         email_list.remove(email_list.size()-1);
         String first = "";
         String temp_string="      ";

         int list_counter= 0;
         int counter=1;
         while(counter<=email_list.size()){
            while(temp_string.substring(0, 2).equals("* ")==false){

                if(counter>=email_list.size())
                    break;

                temp_string= (String) email_list.get(counter);


                while(temp_string.length()<=2){

                    if(counter>=email_list.size())
                        break;

                    temp_string= (String) email_list.get(counter);
                    if(temp_string.length()>2){
                        break;
                    }
                    first+= temp_string+"\n";
                    counter++;
                }

                if(counter>=email_list.size())
                        break;

                if(temp_string.substring(0, 2).equals("* ")==true)
                {
                    counter++;
                }
                else{
                first+= temp_string+"\n";
                counter++;
                }

            }


            last_list.add(list_counter, first);
            list_counter++;
            first="";
            temp_string = "      ";

            if(counter>=email_list.size())
                        break;
         }
         DefaultListModel my_model = new DefaultListModel();
            String str = "";
            for(int i = 0; i<last_list.size();i++){
                str += last_list.get(i);
            }
          jTextArea1.setText(str);
          output.close();
          input.close();
          socket.close();
    } catch ( IOException ioException ) {
         ioException.printStackTrace();
      }

    }//GEN-LAST:event_jList1MouseClicked

 private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         

         //log out
            

    }                                        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
